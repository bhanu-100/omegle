# # CLIENT_URL=https://omegle-beta.vercel.app
# PORT=3000
# REDIS_URL=redis://redis-master:6379
# KAFKA_BROKERS=broker1:9092,broker2:9092
# KAFKA_TOPIC_EVENTS=user-events
# LOG_LEVEL=info

# service_uri = kafka-1b7c033-bhanusinghx100-eca2.k.aivencloud.com:24978
# host = kafka-1b7c033-bhanusinghx100-eca2.k.aivencloud.com
# port = 24978
# access_key = -----BEGIN PRIVATE KEY-----
# MIIG/QIBADANBgkqhkiG9w0BAQEFAASCBucwggbjAgEAAoIBgQDGek7cpzrfaJkf
# zoEPPpsgA3D7zfPcOIGw4G02ATy10nP2oM6wSvLBNTXiHZdh3wWgvupGWn7He88I
# VW/rTBkOjvolu+8DusDu4EbXTewxccTlimKgcmERdU/CldJAu4l/iocNxvYJAGxa
# 924ccND8+3BwguidBvr8AjPwO+SDLhLT8upJOxU76+ksI2y/n/GPVc3hAPtYZBD4
# hc+mZsFWWutJtCad8vlU/t6xvH7K4w7wpiOmzY4AUCdk5f6xl15Vg/TTONMgJ60X
# UBFKQfUKho1p5I8050SUXPsefrVfajkgzY6dOMUG9PD8AWdp+TMTqP5bSuZIpBdD
# 9ygv0eU7P00tzt8zuKFUc2gg3ylkGorANRi0q1YMcJ83ArBuNF+0KqhKQBM+SrbD
# VcPMzCaImj72VqZI5+X7TRfscRnOrwZb6mOFZS/YontJyVcS3TyKr9XTJ5Y/Fj2z
# zxDYF6Yopvby5pMPowLyleTFOUS8ODTVQNZX2MeKmQF5MXUm9tsCAwEAAQKCAYA5
# 0d+vgDgyZTJWhb4rRr3CMb50XKcx/HQrpvWpyep5vXly253a1bqqdmngGWbEaEgn
# b/an0C0mx/akIt+b2GtkRlqxK3KRz5HtBQEeL+Ei9lW52PqqayfEAjzeHu9FVFzV
# /vEhHlkGfk0Sowo81tDLIiS7YieJt0Ler3WaApirbnylqhp+guvIrQ0cgqVnnZyt
# eP2lErgmI+Cdxb2caEricVIiAo1Nbj8cd7NAa/0z9bmgeYXhTfiUNsWDK01rRwD8
# 4/npIcGqnd481MpdEBtTce8T78aVk0s5nMTzBVRg3KOzpZwe1X8rtXWgGAG0zgHt
# qckG6JTAL1IQ0eoFPQQ9mirPZPk3viif10/St2c+oCpcm0peE0vxsa/xEFlk7HGj
# oEAigxtrfY3duif7DXLoiKW4MZEWWuWD5+HyJIm1zxIh5NOyKzdDBERcn8I+I8X6
# FqseOPawKYgvYTQ3jthGWj5dkcJpKE7ZaLJssAVqYClHnWeuiXrl7PheDkU0ncEC
# gcEA5hcm6rOIAihGWCt5E5lXvnaUXSTdmS6R0nsuuEqvkrDcepbG8LT/BJ5x1z11
# Ll+69Zu3rYkK6BIdxdoaVYxFyuuWVKl4URi7C/m1zqmdWcWqyk1jMr3WPOmso3Ok
# 8u8au+LiFJxZjeXVF0ta0AUAbRSIic81gDwAvLwuV+3TuqVNuNZD1wYKvSXBHDO5
# V/lrVi7gzUDliFpLVuA6UQEPFrjamF47LvfrU5j9O5ub6mcBeoJGW+kd82Q7coxA
# ivCZAoHBANzT2nGrf2gFLrcqE37fNa4k20+X6pqtXtwpy8IoH60Q1UVHJEuujB7q
# udpnxvA/AP+XS+z4rS/sGtoLUQPaHk3cbKZpBwekIbzPhGHhhz1Yq3EHa8twZTHD
# v2ziTp2ShevCELmlQT5aWdL6ucyYMSE2rZAZQcz2ZXK79N612oIxoGGM8TFqqETK
# 4b+vRNTSfdTPaLOtcxJydksAD2ya6PRlp1MTXZPTli077Yav0ENJq2SGCmFKcoPz
# 86D4uaOnkwKBwQDIsbEUTvx3RUH2bhTx73MFgtDuXdWcY252NVQPE7YJMZNeql1k
# X7uA/+M0Zzrq9D1TNjwEdeC5g/PMO+10aSIHWW6K8jcsJXIhg/H9DR1ezHeodc/s
# 1oEkKH6ZI6ng7IZZFBE3ARlsF+jCpMvVXkd83cgqzD5SWAQcm9eggqWHy9/7NYl+
# 6Jo9Wc0TGFq2Taw+RC15Wv3a7UeBw5uaRF4w55RkCu18jmsJRAy+DYD1+FrlzPQp
# /zBMuETSKVuy1SECgcA/YkOyGtKgDdTB2D7uTK1Axe15JBa/vQGcWhbVLOUirNE6
# aFgfrQMlIKSl7uGoNb1Yn5m4dAxp0/BFI7hmTaYjHSDGhyDwbYkNg9bwrWY/EoNr
# FwE2zJUPOqtoWnDMQ7FS4UohrzBR8GcV6seH1StM6D/bO5SqexLVYuO/RR1p/0qU
# lXrpfz67OCyh83HjUGOzwLDB2ghMhDQ2BNdoifJRrBfh/Y3/j1zssOXVogM6PRwH
# 5311PYQvIceNLbdDJScCgcBq2zoCaImtkziAVvq0vIXivdug5TdfB0x5vKDVQQ6w
# CcC/AFVxH9kTtTZiMnA6ZHU/LJxsrJA09Y0FrGwLp7icueLpE4rtVy5Ac9wo1Lwz
# 6J+BFrZZYFt5nP7ZWO/hFtpdw7IQNnKCvMM/sjtywvRu1A2rYMJQXPsEuOt4vBSC
# NsglzrBRjb+tZM4NyLC/eW1UZ6UCiK+AIKoRc18fOd9VbYrNGDCDfIxRJ1eGUWq4
# wNg0fG1uFaeSGKpM4J9bRJY=
# -----END PRIVATE KEY-----
# access_certificate=-----BEGIN CERTIFICATE-----
# MIIEZjCCAs6gAwIBAgIUVpSG9CUqmPF9c6alkHaySbJhazcwDQYJKoZIhvcNAQEM
# BQAwQDE+MDwGA1UEAww1NDA1NjdiZmMtODJmMy00NThjLTkzZWYtZGFlMDBlNWJl
# ODRmIEdFTiAxIFByb2plY3QgQ0EwHhcNMjUwODI0MTcyMzI1WhcNMjcxMTIyMTcy
# MzI1WjA+MRYwFAYDVQQKDA1rYWZrYS0xYjdjMDMzMREwDwYDVQQLDAh1MnI5YTd1
# OTERMA8GA1UEAwwIYXZuYWRtaW4wggGiMA0GCSqGSIb3DQEBAQUAA4IBjwAwggGK
# AoIBgQDGek7cpzrfaJkfzoEPPpsgA3D7zfPcOIGw4G02ATy10nP2oM6wSvLBNTXi
# HZdh3wWgvupGWn7He88IVW/rTBkOjvolu+8DusDu4EbXTewxccTlimKgcmERdU/C
# ldJAu4l/iocNxvYJAGxa924ccND8+3BwguidBvr8AjPwO+SDLhLT8upJOxU76+ks
# I2y/n/GPVc3hAPtYZBD4hc+mZsFWWutJtCad8vlU/t6xvH7K4w7wpiOmzY4AUCdk
# 5f6xl15Vg/TTONMgJ60XUBFKQfUKho1p5I8050SUXPsefrVfajkgzY6dOMUG9PD8
# AWdp+TMTqP5bSuZIpBdD9ygv0eU7P00tzt8zuKFUc2gg3ylkGorANRi0q1YMcJ83
# ArBuNF+0KqhKQBM+SrbDVcPMzCaImj72VqZI5+X7TRfscRnOrwZb6mOFZS/YontJ
# yVcS3TyKr9XTJ5Y/Fj2zzxDYF6Yopvby5pMPowLyleTFOUS8ODTVQNZX2MeKmQF5
# MXUm9tsCAwEAAaNaMFgwHQYDVR0OBBYEFP1cbl8nCpalfPoG0tSCAe/BW/JIMAkG
# A1UdEwQCMAAwCwYDVR0PBAQDAgWgMB8GA1UdIwQYMBaAFN+okcJSFCNg1o7H1Uwg
# EUgL6kI0MA0GCSqGSIb3DQEBDAUAA4IBgQAe4nZbepnDirrVZbNgzCKnfWPdDezV
# GnTIX0Ll76fiJgmWlTY8cPuSxJBtmk2fyvfpPMtsGP2yn3ARtuI47wRxBSWxOGHD
# D/5AHw1u0/EUalasfgfCGuTVEhtCh9lTwAq1BShU5l7dhKnYiEwWTKNgFB4vBmPb
# hJxdzPLDzPCM6OMNnIoK9IpjQGyeQd9Spv6X3dFBxNYyh7DK1WEYMX2rUIEddLhX
# 1SO5qohg9/RsmU7dIpErDj4JU3EYuMokUkg5wPTXO/sUVH4mLWs+ubehdjmvPilV
# uNY+725OmFI5q4JcOKXLaoke7onwv2/XQd2EpyhCU9XTrhCz0P3Xl/F2NjSUWUx1
# O7pavO85oijM8dUGmfFvNWwuuCSeKkzBW45xjzlIV5htxAC+0CgaXcGIsvIO9IAk
# PeS9FPEMiNZSjJGvGhQBiduyEmJiGGGOROC6AZSAF8+5DQf/E1Gk1M019xqqlB81
# Al5psqSWCDMFRCfRD6PiX8t1fmKqBJh51Uc=
# -----END CERTIFICATE-----

# const client = createClient({
#     username: 'default',
#     password: 'RXN6P4c3vvHXyqoTN4ggQiGAqsIAmUoI',
#     socket: {
#         host: 'redis-18915.c61.us-east-1-3.ec2.redns.redis-cloud.com',
#         port: 18915
#     }
# });
# const Kafka = require("node-rdkafka");

# const TOPIC_NAME = "TOPIC_NAME";

# const producer = new Kafka.Producer({
#   'metadata.broker.list': "kafka-1b7c033-bhanusinghx100-eca2.k.aivencloud.com:24978",
#   "security.protocol": "ssl",
#   "ssl.key.location": "service.key",
#   "ssl.certificate.location": "service.cert",
#   "ssl.ca.location": "ca.pem",
#   dr_cb: true,
# });

# producer.connect();

# const sleep = async (timeInMs) =>
#   await new Promise((resolve) => setTimeout(resolve, timeInMs));

# const produceMessagesOnSecondIntervals = async () => {
#   // produce 100 messages on 1 second intervals
#   let i = 0;
#   while (i < 100) {
#     try {
#       if (!producer.isConnected()) {
#         await sleep(1000);
#         continue;
#       }

#       const message = `Hello from Node using SSL ${++i}!`;
#       producer.produce(
#         // Topic to send the message to
#         TOPIC_NAME,
#         // optionally we can manually specify a partition for the message
#         // this defaults to -1 - which will use librdkafka's default partitioner (consistent random for keyed messages, random for unkeyed messages)
#         null,
#         // Message to send. Must be a buffer
#         Buffer.from(message),
#         // for keyed messages, we also specify the key - note that this field is optional
#         null,
#         // you can send a timestamp here. If your broker version supports it,
#         // it will get added. Otherwise, we default to 0
#         Date.now()
#       );
#       console.log(`Message sent: ${message}`);
#     } catch (err) {
#       console.error("A problem occurred when sending our message");
#       console.error(err);
#     }

#     await sleep(1000);
#   }

#   producer.disconnect();
# };

# produceMessagesOnSecondIntervals();
# const Kafka = require("node-rdkafka");

# const TOPIC_NAME = "TOPIC_NAME";

# const stream = new Kafka.createReadStream(
#   {
#     "metadata.broker.list": "kafka-1b7c033-bhanusinghx100-eca2.k.aivencloud.com:24978",
#     "group.id": "GROUP_ID",
#     "security.protocol": "ssl",
#     "ssl.key.location": "service.key",
#     "ssl.certificate.location": "service.cert",
#     "ssl.ca.location": "ca.pem",
#   },
#   { "auto.offset.reset": "beginning" },
#   { topics: [TOPIC_NAME] }
# );

# stream.on("data", (message) => {
#   console.log("Got message using SSL:", message.value.toString());
# });

# Server
CLIENT_URL=http://localhost:5173
PORT=3000
REDIS_URL=redis://:RXN6P4c3vvHXyqoTN4ggQiGAqsIAmUoI@redis-18915.c61.us-east-1-3.ec2.redns.redis-cloud.com:18915
KAFKA_BROKERS=kafka-1b7c033-bhanusinghx100-eca2.k.aivencloud.com:24978
KAFKA_TOPIC_EVENTS=user-events
KAFKA_SSL_KEY=./service.key
KAFKA_SSL_CERT=./service.cert
KAFKA_SSL_CA=./ca.pem
LOG_LEVEL=info

